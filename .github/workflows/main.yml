# This is a basic workflow to help you get started with Actions

name: CI_v3

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job#1
#   acrn_clang_tidy_job:
#     runs-on: self-hosted
#     steps:
#        - uses: actions/checkout@v2
#          with:
#            fetch-depth: 0
#        - name: Run scan
#          run: |
#            echo "start to check code styles and typos ..."
#            cd hypervisor
#            make codescan
#   Job#2
#   checkpatch_job:
#     runs-on: self-hosted
#     steps:
#       - name: Run scan2
#         if : [ pull_request ]
#         run: |
#           echo "start to check code styles and typos ..."
#           pwd
#           git status
#           git rev-list `git merge-base HEAD origin/main` | xargs -n 1 checkpatch.pl --notree --codespell -g
      
#   # Job#3
#   build_job:
#     runs-on: self-hosted
#     steps:
#       - name: build
#         run: |
#           echo "start to build ..."
#           pwd
#           python3 /opt/actions/modify_bootargs.py first
#           cd hypervisor
#           make clean
#           /opt/acrn-ebtool/docker_run.sh ubuntu:v3.0 "make RELEASE=0"
#           if [ $? -ne 0 ]; then exit 1; fi
#     needs:
#       acrn_clang_tidy_job
  
  # Job#4  
  test_srs_build_job:
     runs-on: self-hosted
     steps:
       - name: test
         run: |
           echo "start to test srs lauching acrn unit test ..."
           pwd
           git reset --hard && git checkout main && git pull
           python3 /opt/actions/modify_script.py vm1
           sleep 3
           /opt/acrn-ebtool/docker_run.sh ubuntu:v3.0 "cd hypervisor && make clean && make RELEASE=0 && ls -lh‚Äù
           if [ $? -ne 0 ]; then exit 1; fi
           mv build/acrn.32.out /var/lib/tftpboot/acrn_srs/srs/acrn_pci_vm1.32.out
           git reset --hard && git checkout main && git pull
#     if: ${{ always() }}
#     needs:
#       build_job
